rules_version = '2';

// Firestore Security Rules for Psst Messaging App
// Created by Caleb (Coder Agent) - PR #17

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read all, but only update their own
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if request.auth != null;

      // Users can create their own profile during signup
      // PR #6.5: Validate role field is present and valid
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.role in ['trainer', 'client'];

      // Users can update their own profile
      // PR #6.5: Prevent role changes (role is immutable)
      allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       (!request.resource.data.keys().hasAny(['role']) ||
                        request.resource.data.role == resource.data.role);

      // Users cannot delete profiles
      allow delete: if false;
    }
    
    // Chats collection
    match /chats/{chatId} {
      // Users can read chats they're a member of
      allow read: if request.auth != null && 
                     request.auth.uid in resource.data.members;
      
      // Users can create chats if they're in the members list
      allow create: if request.auth != null && 
                       request.auth.uid in request.resource.data.members;
      
      // Members can update chat metadata
      allow update: if request.auth != null && 
                       request.auth.uid in resource.data.members;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Members can read messages in their chats
        allow read: if request.auth != null && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        
        // Members can create messages in their chats
        allow create: if request.auth != null && 
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members &&
                         request.auth.uid == request.resource.data.senderID;
        
        // Senders can update their own messages (for read receipts, status, etc.)
        allow update: if request.auth != null && 
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
    
    // AI Conversations collection
    match /ai_conversations/{conversationId} {
      // Trainers can read their own AI conversations
      allow read: if request.auth != null &&
                     request.auth.uid == resource.data.trainerId;

      // Trainers can create their own AI conversations
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.trainerId;

      // Trainers can update their own AI conversations
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.trainerId;

      // AI Messages subcollection
      match /messages/{messageId} {
        // Trainers can read messages in their own AI conversations
        allow read: if request.auth != null &&
                       request.auth.uid == get(/databases/$(database)/documents/ai_conversations/$(conversationId)).data.trainerId;

        // Trainers can create messages in their own AI conversations
        allow create: if request.auth != null &&
                         request.auth.uid == get(/databases/$(database)/documents/ai_conversations/$(conversationId)).data.trainerId;

        // Trainers can update messages in their own AI conversations
        allow update: if request.auth != null &&
                         request.auth.uid == get(/databases/$(database)/documents/ai_conversations/$(conversationId)).data.trainerId;
      }
    }

    // Client Profiles collection (PR #007)
    match /clientProfiles/{clientId} {
      // Trainers and clients can read profiles
      // Trainer: can read profiles for their assigned clients
      // Client: can read their own profile
      allow read: if request.auth != null &&
                     (resource == null ||
                      request.auth.uid == resource.data.trainerId ||
                      request.auth.uid == resource.data.clientId);

      // Allow create if authenticated (Cloud Functions run as admin, bypass rules)
      allow create: if request.auth != null;

      // Allow update if authenticated (for both Cloud Functions and manual edits)
      allow update: if request.auth != null;

      // Only trainers can delete their clients' profiles
      allow delete: if request.auth != null &&
                       resource != null &&
                       request.auth.uid == resource.data.trainerId;
    }

    // Calendar collection (PR #008 + PR #010A - Manual Event Creation)
    match /calendar/{eventId} {
      // Trainers can read their own calendar events
      allow read: if request.auth != null &&
                     request.auth.uid == resource.data.trainerId;

      // PR #010A: Trainers can manually create calendar events
      // Validation rules:
      // 1. trainerId must match authenticated user
      // 2. eventType must be valid: "training", "call", or "adhoc"
      // 3. startTime must be before endTime
      // 4. Training/Call events require clientId OR prospectId
      // 5. Adhoc events must NOT have clientId or prospectId
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.trainerId &&
                       request.resource.data.eventType in ['training', 'call', 'adhoc'] &&
                       request.resource.data.startTime < request.resource.data.endTime &&
                       // Training/Call require client or prospect
                       ((request.resource.data.eventType in ['training', 'call'] &&
                         ('clientId' in request.resource.data || 'prospectId' in request.resource.data)) ||
                        // Adhoc must NOT have client or prospect
                        (request.resource.data.eventType == 'adhoc' &&
                         !('clientId' in request.resource.data) &&
                         !('prospectId' in request.resource.data)));

      // Trainers can update their own calendar events (change status, time, etc.)
      // Validation: trainerId cannot be changed
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.trainerId &&
                       request.resource.data.trainerId == resource.data.trainerId;

      // Trainers can delete their own calendar events
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.trainerId;
    }

    // Reminders collection (PR #008 - AI Function Calling)
    match /reminders/{reminderId} {
      // Trainers can read their own reminders
      allow read: if request.auth != null &&
                     request.auth.uid == resource.data.trainerId;

      // Only Cloud Functions can create reminders (AI-generated)
      // Trainers cannot directly create - must go through Cloud Function
      allow create: if false;

      // Trainers can update their own reminders (mark complete, etc.)
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.trainerId;

      // Trainers can delete their own reminders
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.trainerId;
    }

    // AI Actions audit log (PR #008 - AI Function Calling)
    match /aiActions/{actionId} {
      // Trainers can read their own AI action history
      allow read: if request.auth != null &&
                     request.auth.uid == resource.data.trainerId;

      // Only Cloud Functions can create and update audit logs
      // Trainers cannot modify audit trail
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Contacts collection - Trainer-Client Relationships (PR #009)
    // Parent contacts document (metadata only)
    match /contacts/{trainerId} {
      // Trainers can read/write their own contacts metadata document
      allow read, write: if request.auth != null &&
                            request.auth.uid == trainerId;
    }

    // Collection group query rule for clients to find their trainers
    match /{path=**}/clients/{clientId} {
      // Allow read if the authenticated user IS this client
      // Check both path variable AND document data field
      allow read: if request.auth != null &&
                     (request.auth.uid == clientId ||
                      request.auth.uid == resource.data.clientId ||
                      request.auth.uid == resource.data.id);
    }

    match /contacts/{trainerId}/clients/{clientId} {
      // Trainer can read/write their own clients
      // Client can read if they are the client (clientId matches their UID)
      allow read: if request.auth != null &&
                     (request.auth.uid == trainerId ||
                      request.auth.uid == clientId);
      allow write: if request.auth != null &&
                      request.auth.uid == trainerId;
    }

    match /contacts/{trainerId}/prospects/{prospectId} {
      // Only trainer can read/write their own prospects
      allow read, write: if request.auth != null &&
                            request.auth.uid == trainerId;
    }
  }
}

