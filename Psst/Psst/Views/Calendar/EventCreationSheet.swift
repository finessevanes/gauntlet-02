//
//  EventCreationSheet.swift
//  Psst
//
//  Created for PR #010A: Calendar Foundation
//  Form for manually creating calendar events
//

import SwiftUI

struct EventCreationSheet: View {

    @ObservedObject var viewModel: CalendarViewModel
    @ObservedObject var contactsViewModel: ContactsViewModel
    @Environment(\.dismiss) var dismiss

    @State private var eventType: CalendarEvent.EventType = .training
    @State private var selectedClientId: String?
    @State private var selectedProspectId: String?
    @State private var title: String = ""
    @State private var selectedDate: Date = Date()
    @State private var startTime: Date = Date()
    @State private var duration: TimeInterval = 3600 // 1 hour default
    @State private var location: String = ""
    @State private var notes: String = ""
    @State private var showClientPicker = false

    var body: some View {
        NavigationView {
            Form {
                // Event Type Section
                Section(header: Text("Event Type")) {
                    HStack(spacing: 12) {
                        // Training
                        EventTypeButton(
                            emoji: "üèãÔ∏è",
                            label: "Training",
                            isSelected: eventType == .training
                        ) {
                            eventType = .training
                        }

                        // Call
                        EventTypeButton(
                            emoji: "üìû",
                            label: "Call",
                            isSelected: eventType == .call
                        ) {
                            eventType = .call
                        }

                        // Personal
                        EventTypeButton(
                            emoji: "üìÖ",
                            label: "Personal",
                            isSelected: eventType == .adhoc
                        ) {
                            eventType = .adhoc
                        }
                    }
                }

                // Client/Prospect Selection (only for Training and Call)
                if eventType == .training || eventType == .call {
                    Section(header: Text("Client")) {
                        Button(action: {
                            showClientPicker = true
                        }) {
                            HStack {
                                Text(selectedClientOrProspectName ?? "Select Client")
                                    .foregroundColor(selectedClientOrProspectName == nil ? .gray : .primary)
                                Spacer()
                                Image(systemName: "chevron.right")
                                    .foregroundColor(.gray)
                            }
                        }

                        if selectedClientId != nil || selectedProspectId != nil {
                            Button(action: {
                                selectedClientId = nil
                                selectedProspectId = nil
                            }) {
                                Text("Clear Selection")
                                    .foregroundColor(.red)
                            }
                        }
                    }
                }

                // Title Section
                Section(header: Text("Title")) {
                    if eventType == .adhoc {
                        TextField("Event title", text: $title)
                    } else {
                        Text(autoGeneratedTitle)
                            .foregroundColor(.secondary)
                    }
                }

                // Date & Time Section
                Section(header: Text("Date & Time")) {
                    DatePicker("Date", selection: $selectedDate, in: Date()..., displayedComponents: .date)
                        .datePickerStyle(.compact)
                        .onChange(of: selectedDate) { oldValue, newValue in
                            print("[EventCreationSheet] üìÖ Date value changed: \(newValue)")
                        }

                    DatePicker("Start Time", selection: $startTime, displayedComponents: .hourAndMinute)
                        .datePickerStyle(.compact)
                        .onChange(of: startTime) { oldValue, newValue in
                            print("[EventCreationSheet] ‚è∞ Time value changed: \(newValue)")
                        }

                    Picker("Duration", selection: $duration) {
                        Text("30 minutes").tag(TimeInterval(1800))
                        Text("1 hour").tag(TimeInterval(3600))
                        Text("1.5 hours").tag(TimeInterval(5400))
                        Text("2 hours").tag(TimeInterval(7200))
                    }
                    .onChange(of: duration) { oldValue, newValue in
                        print("[EventCreationSheet] ‚è±Ô∏è Duration changed from \(oldValue)s to \(newValue)s")
                    }
                }

                // Optional Details Section
                Section(header: Text("Optional Details")) {
                    TextField("Location (optional)", text: $location)

                    VStack(alignment: .leading) {
                        Text("Notes (optional)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        TextEditor(text: $notes)
                            .frame(height: 100)
                    }
                }

                // Validation Error
                if !validationError.isEmpty {
                    Section {
                        Text(validationError)
                            .foregroundColor(.red)
                            .font(.caption)
                    }
                }

                // Firestore Error
                if let errorMessage = viewModel.errorMessage {
                    Section {
                        Text(errorMessage)
                            .foregroundColor(.red)
                            .font(.caption)
                    }
                }
            }
            .navigationTitle("Create Event")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }

                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        createEvent()
                    }
                    .disabled(!isValid)
                }
            }
            .sheet(isPresented: $showClientPicker) {
                ClientPickerView(
                    contactsViewModel: contactsViewModel,
                    selectedClientId: $selectedClientId,
                    selectedProspectId: $selectedProspectId
                )
            }
            .onChange(of: eventType) { oldValue, newValue in
                print("[EventCreationSheet] üîÑ Event type changed from \(oldValue) to \(newValue)")
                // Clear client selection when switching to adhoc
                if newValue == .adhoc {
                    selectedClientId = nil
                    selectedProspectId = nil
                }
            }
            .onAppear {
                print("[EventCreationSheet] ‚úÖ ========== EVENT CREATION SHEET APPEARED ==========")
                print("[EventCreationSheet] Initial values:")
                print("  - Event Type: \(eventType)")
                print("  - Selected Date: \(selectedDate)")
                print("  - Start Time: \(startTime)")
                print("  - Duration: \(duration)s")
                print("[EventCreationSheet] ========================================")

                // Clear any previous errors
                viewModel.errorMessage = nil
            }
            .onDisappear {
                print("[EventCreationSheet] ‚ùå ========== EVENT CREATION SHEET DISAPPEARED ==========")
            }
        }
    }

    // MARK: - Computed Properties

    private var selectedClientOrProspectName: String? {
        if let clientId = selectedClientId,
           let client = contactsViewModel.clients.first(where: { $0.id == clientId }) {
            return client.displayName
        }
        if let prospectId = selectedProspectId,
           let prospect = contactsViewModel.prospects.first(where: { $0.id == prospectId }) {
            return prospect.displayName
        }
        return nil
    }

    private var autoGeneratedTitle: String {
        guard let name = selectedClientOrProspectName else {
            return eventType == .training ? "Training Session" : "Call"
        }

        switch eventType {
        case .training:
            return "Session with \(name)"
        case .call:
            return "Call with \(name)"
        case .adhoc:
            return ""
        }
    }

    private var isValid: Bool {
        validationError.isEmpty
    }

    private var validationError: String {
        // Training/Call requires client or prospect
        if (eventType == .training || eventType == .call) &&
           selectedClientId == nil && selectedProspectId == nil {
            return "\(eventType == .training ? "Training" : "Call") events require a client or prospect"
        }

        // Adhoc requires custom title
        if eventType == .adhoc && title.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
            return "Personal events require a title"
        }

        return ""
    }

    private var combinedStartTime: Date {
        let calendar = Calendar.current
        let dateComponents = calendar.dateComponents([.year, .month, .day], from: selectedDate)
        let timeComponents = calendar.dateComponents([.hour, .minute], from: startTime)

        var combined = DateComponents()
        combined.year = dateComponents.year
        combined.month = dateComponents.month
        combined.day = dateComponents.day
        combined.hour = timeComponents.hour
        combined.minute = timeComponents.minute

        return calendar.date(from: combined) ?? Date()
    }

    private var endTime: Date {
        combinedStartTime.addingTimeInterval(duration)
    }

    // MARK: - Actions

    private func createEvent() {
        let finalTitle = eventType == .adhoc ? title : autoGeneratedTitle

        print("[EventCreationSheet] üöÄ Creating event:")
        print("  - Event Type: \(eventType)")
        print("  - Title: \(finalTitle)")
        print("  - Client ID: \(selectedClientId ?? "none")")
        print("  - Prospect ID: \(selectedProspectId ?? "none")")
        print("  - Start Time: \(combinedStartTime)")
        print("  - End Time: \(endTime)")
        print("  - Location: \(location.isEmpty ? "none" : location)")
        print("  - Notes: \(notes.isEmpty ? "none" : notes)")

        Task {
            await viewModel.createEvent(
                eventType: eventType,
                title: finalTitle,
                clientId: selectedClientId,
                prospectId: selectedProspectId,
                startTime: combinedStartTime,
                endTime: endTime,
                location: location.isEmpty ? nil : location,
                notes: notes.isEmpty ? nil : notes
            )

            // Only dismiss if there's no error
            if viewModel.errorMessage == nil {
                print("[EventCreationSheet] ‚úÖ Event created successfully, dismissing sheet")
                dismiss()
            } else {
                print("[EventCreationSheet] ‚ùå Error creating event: \(viewModel.errorMessage ?? "unknown")")
            }
        }
    }
}

// MARK: - Event Type Button Component

struct EventTypeButton: View {
    let emoji: String
    let label: String
    let isSelected: Bool
    let action: () -> Void

    var body: some View {
        Button(action: action) {
            VStack(spacing: 8) {
                Text(emoji)
                    .font(.title2)
                Text(label)
                    .font(.caption)
                    .fontWeight(isSelected ? .semibold : .regular)
            }
            .frame(maxWidth: .infinity)
            .padding(.vertical, 12)
            .background(isSelected ? Color.blue : Color.gray.opacity(0.15))
            .foregroundColor(isSelected ? .white : .primary)
            .cornerRadius(10)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Preview

struct EventCreationSheet_Previews: PreviewProvider {
    static var previews: some View {
        EventCreationSheet(
            viewModel: CalendarViewModel(),
            contactsViewModel: ContactsViewModel(
                contactService: .shared,
                userService: .shared
            )
        )
    }
}
